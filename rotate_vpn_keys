#!/usr/bin/env zsh

ME=$(basename "$0")

usage() {
  echo "Usage: $ME DESECSTACK_DOMAIN frontend1 [frontend2 [frontend3 [...]]]"
  exit 1
}

if [ -z "$1" ] || [ -z "$2" ]; then
  usage
fi

cecho() {
  RED='\033[0;31m'
  RESET='\033[0m'
  echo "$RED$1$RESET"
}


DOMAIN=$1
BACKEND=desec.$1
BACKEND_DC="/root/desec-stack"
FRONTEND_DC="/root/desec-slave"
BACKEND_SECRETS="$BACKEND_DC/openvpn-server/secrets"
FRONTEND_SECRETS="$FRONTEND_DC/openvpn-client/secrets"
FRONTENDS=$( IFS=$'\n'; echo "${*[*]}" | tail -n +2 )  # arguments passed, separated by line breaks
FAILURES=""
PKI="pki"

FAILURES=""
fail() {
  SERVER=$1
  if ! echo "$FAILURES" | grep "${SERVER}"; then
    FAILURES="$FAILURES $SERVER"
  fi
}

BACKUP_DIR="pki.backup-$(date +%Y%m%d)"
cecho "STEP 0/7: CREATING KEY BACKUPS INTO $BACKUP_DIR/"
mkdir -p "$BACKUP_DIR"
mkdir -p "$BACKUP_DIR/$BACKEND/"
if scp -pr "root@$BACKEND:$BACKEND_SECRETS/" "$BACKUP_DIR/$BACKEND/"; then
  cecho "-> $BACKEND backed up"
else
  fail "$BACKEND"
  cecho "-> $BACKEND backup FAILED"
fi
echo "$FRONTENDS" | while IFS= read -r FRONTEND
do
  if [ -d "$BACKUP_DIR/$FRONTEND" ] && [[ $(find "$BACKUP_DIR/$FRONTEND" | wc -l) -ge 6 ]]; then
    cecho "-> $FRONTEND already present, skipped [$(find "$BACKUP_DIR/$FRONTEND" | wc -l) files]"
    continue
  fi
  rm -rf "${BACKUP_DIR:?}/$FRONTEND"
  TDIR=$(mktemp -d)
  if scp -pr "root@$FRONTEND:$FRONTEND_SECRETS/" "$TDIR"; then
    mv "$TDIR" "$BACKUP_DIR/$FRONTEND/" || fail "$FRONTEND"
    rm -fr "$TDIR"
    cecho "-> $FRONTEND keys backed up"
  else
    fail "$FRONTEND"
    cecho "-> $FRONTEND keys FAILED"
  fi
  rm -rf "$TDIR"
done

if [ -n "$FAILURES" ]; then
  cecho "-> Key backup failed for $FAILURES"
  cecho "-> Press enter to continue anyway ..."
else
  cecho "-> Press enter to continue ..."
fi
read

cecho "Rotating keys for backend $BACKEND with frontends"
cecho "$FRONTENDS"
cecho
cecho "STEP 1/7: GENERATING NEW CA"
if [ ! -f "$PKI/ca.crt" ]; then
  DOMAIN=$DOMAIN bash -c "source bootstrap.sh; vpn" < /dev/tty
  if [ ! -f "$PKI/ca.crt" ]; then
    cecho "-> generation of ca.crt failed. Start over?"
    exit 1
  fi
else
  cecho "-> found ca.crt, skipping. (To start over, \`rm -rf easy-rsa/ $PKI/\`.)"
fi

cecho "step 2/7: GENERATING NEW SERVER KEYS"
if [ ! -f "$PKI/issued/server.crt" ]; then
  DOMAIN=$DOMAIN bash -c "source bootstrap.sh; vpn_stack" < /dev/tty
else
  cecho "-> found server.crt, skipping. (To generate new backend keys, rm $PKI/issued/server.crt.)"
fi

cecho "STEP 3/7: OBTAINING ta.key"
if [ ! -f "$PKI/ta.key" ]; then
  # TODO umask/chmod ta.key?
  ssh "root@$BACKEND" "cd $BACKEND_DC && docker-compose exec -T openvpn-server openvpn --genkey --secret /dev/stdout" > "$PKI/ta.key" || (echo "-> failed downloading ta.key."; exit 1) || exit 1
  if [ ! -f "$PKI/ta.key" ]; then
    chmod 600 "$PKI/ta.key"
    cecho "-> generated fresh ta.key."
  fi
else
  cecho "-> found ta.key, skipping. (To generate freshly, rm $PKI/ta.key.)"
fi

cecho "STEP 4/7: GENERATING NEW CLIENT KEYS"
echo "$FRONTENDS" | while IFS= read -r HOST
do
  if [ ! -f "$PKI/issued/$HOST.crt" ]; then
    cecho "-> Generating keys for $HOST"
    rm -f "$PKI/private/$HOST.key" "$PKI/reqs/$HOST.req"
    HOST=$HOST bash -c "source bootstrap.sh; vpn_frontend" < /dev/tty
    if [ ! -f "$PKI/issued/$HOST.crt" ]; then
      cecho "-> key generation for $HOST failed!"
      fail "$HOST"
    else
      cecho "-> key generation for $HOST successful."
    fi
  else
    cecho "-> found $HOST.crt, skipping. (To generate new frontend keys for $HOST, rm $PKI/issued/$HOST.crt.)"
  fi
done

if [ -n "$FAILURES" ]; then
  cecho "-> Key generation failed for $FAILURES"
  cecho "-> Aborting key distribution"
  exit 1
else
  cecho "-> Key generation complete. Press enter to start key distribution."
  cecho "-> THIS WILL OVERWRITE EXISTING KEYS ON ALL SERVERS. PRESS CTRL-C TO ABORT"
  read
fi

FAILURES=""

cecho "STEP 5/7: DISTRIBUTING NEW SERVER KEYS"
scp -pq "$PKI/ca.crt" "$PKI/ta.key" "$PKI/issued/server.crt" "$PKI/private/server.key" "root@$BACKEND:$BACKEND_SECRETS/" || fail $BACKEND

if [ -n "$FAILURES" ]; then
  cecho "-> ERROR distributing new keys to backend $BACKEND. Setup may be broken. Re-run this script to try again."
  exit 1
fi
cecho "-> server key distribution completed"

cecho "STEP 6/7: DISTRIBUTING NEW CLIENT KEYS"
echo "$FRONTENDS" | while IFS= read -r HOST
do
  cecho "-> distributing keys to $HOST ..."
  FULL_PKI=$(cd "$PKI" && pwd)
  TDIR=$(mktemp -d)
  (
    cd "$TDIR" || exit 2
    ln -s "$FULL_PKI/issued/$HOST.crt" client.crt
    ln -s "$FULL_PKI/private/$HOST.key" client.key
    ln -s "$FULL_PKI/ta.key" .
    ln -s "$FULL_PKI/ca.crt" .
  )
  scp -pq "$TDIR/client.crt" "$TDIR/client.key" "$TDIR/ta.key" "$TDIR/ca.crt" "root@$HOST:$FRONTEND_SECRETS/" || fail $HOST
  # rm -r "$TDIR"
done

if [ -n "$FAILURES" ]; then
  cecho "-> ERROR distributing new keys to frontends $FAILURES. They wont be able to connect."
  cecho "-> Run \`$ME $DOMAIN ${FAILURES}\` to try again."
  cecho "-> Afterwards, press enter to restart all VPN container."
  read
fi

cecho "STEP 7/7: RESTARTING ALL VPN CONTAINER"
cecho "-> $BACKEND@$BACKEND_DC"
ssh "root@$BACKEND" "cd $BACKEND_DC && docker-compose restart openvpn-server"
echo "$FRONTENDS" | while IFS= read -r HOST
do
  cecho "-> $HOST@$FRONTEND_DC"
  ssh -n "root@$HOST" "cd $FRONTEND_DC && docker-compose restart openvpn-client"
done

cecho "DONE. DELETE PKI BACKUP AND NEW PKI USING"
cecho "-> \`srm -r $BACKUP_DIR $PKI\`"
